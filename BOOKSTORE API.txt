openapi: 3.0.3
info:
  title: BookStore API
  description: |
    API for managing books, authors, and customer orders in an online bookstore.
    This API enables browsing books, managing inventory, and placing orders.
  termsOfService: http://bookstore.com/terms
  contact:
    email: support@bookstore.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 1.0.0
servers:
  - url: https://api.bookstore.com/v1
    description: Production server
  - url: https://sandbox.bookstore.com/v1
    description: Sandbox server for testing
tags:
  - name: books
    description: Manage books in the store
  - name: authors
    description: Manage authors of books
  - name: orders
    description: Manage customer orders
paths:
  /books:
    get:
      tags:
        - books
      summary: Get a list of books
      description: Retrieve a list of books available in the store, with optional filters.
      operationId: getBooks
      parameters:
        - name: title
          in: query
          description: Filter books by title
          required: false
          schema:
            type: string
        - name: authorId
          in: query
          description: Filter books by author ID
          required: false
          schema:
            type: string
        - name: genre
          in: query
          description: Filter books by genre
          required: false
          schema:
            type: string
        - name: priceRange
          in: query
          description: Filter books by price range
          required: false
          schema:
            type: string
            example: "10-50"
      responses:
        '200':
          description: A list of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '400':
          description: Invalid query parameters
    post:
      tags:
        - books
      summary: Add a new book
      description: Add a new book to the bookstore inventory.
      operationId: createBook
      requestBody:
        description: Book object to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid book data
  /books/{bookId}:
    get:
      tags:
        - books
      summary: Get book details
      description: Retrieve detailed information about a specific book.
      operationId: getBookById
      parameters:
        - name: bookId
          in: path
          description: The ID of the book to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Book details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
    put:
      tags:
        - books
      summary: Update a book
      description: Modify the details of an existing book.
      operationId: updateBook
      parameters:
        - name: bookId
          in: path
          description: The ID of the book to update
          required: true
          schema:
            type: string
      requestBody:
        description: Updated book data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: Book updated successfully
        '400':
          description: Invalid book data
        '404':
          description: Book not found
    delete:
      tags:
        - books
      summary: Delete a book
      description: Remove a book from the inventory.
      operationId: deleteBook
      parameters:
        - name: bookId
          in: path
          description: The ID of the book to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Book deleted successfully
        '404':
          description: Book not found
  /authors:
    get:
      tags:
        - authors
      summary: Get a list of authors
      description: Retrieve a list of authors, optionally filtered by name or genre.
      operationId: getAuthors
      parameters:
        - name: name
          in: query
          description: Filter authors by name
          required: false
          schema:
            type: string
        - name: genre
          in: query
          description: Filter authors by genre
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A list of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        '400':
          description: Invalid query parameters
  /orders:
    post:
      tags:
        - orders
      summary: Place a new order
      description: Create a new order for books.
      operationId: createOrder
      requestBody:
        description: Order details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Order placed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid order data
components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        authorId:
          type: string
        genre:
          type: string
        price:
          type: number
          format: float
        description:
          type: string
    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        biography:
          type: string
        genre:
          type: string
    Order:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        bookIds:
          type: array
          items:
            type: string
        orderDate:
          type: string
          format: date-time
        totalAmount:
          type: number
          format: float
        status:
          type: string
          enum:
            - placed
            - shipped
            - delivered
securitySchemes:
  api_key:
    type: apiKey
    in: header
    name: Authorization
